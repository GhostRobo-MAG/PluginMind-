# PluginMind Backend - Docker Build & Push Workflow
# Container Build Pipeline with Multi-Stage Optimization

name: üê≥ Docker Build & Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_call:
    inputs:
      push-image:
        description: 'Push built image to registry'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pluginmind/backend

jobs:
  # =============================================================================
  # Docker Build & Test
  # =============================================================================
  build:
    name: üî® Build & Test Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üè∑Ô∏è Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üê≥ Build Development Image
        uses: docker/build-push-action@v5
        with:
          context: ./pluginmind_backend
          target: development
          load: true
          tags: pluginmind-backend:dev-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üß™ Test Development Container
        run: |
          # Create test network
          docker network create pluginmind-test || true
          
          # Start PostgreSQL for testing
          docker run -d \
            --name postgres-test \
            --network pluginmind-test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_USER=test \
            -e POSTGRES_DB=test \
            postgres:15-alpine
          
          # Wait for PostgreSQL
          sleep 10
          
          # Test container startup
          docker run --rm \
            --network pluginmind-test \
            -e TESTING=1 \
            -e DATABASE_URL="postgresql://test:test@postgres-test:5432/test" \
            -e OPENAI_API_KEY="test-key" \
            -e GROK_API_KEY="test-key" \
            -e GOOGLE_CLIENT_ID="test-client-id.apps.googleusercontent.com" \
            -e JWT_SECRET="dGVzdC1zZWNyZXQtZm9yLWNpLWNkLXRlc3Rpbmc=" \
            pluginmind-backend:dev-test \
            python -c "
          import asyncio
          from app.core.config import settings
          from app.database import create_db_and_tables
          print('‚úÖ Container configuration valid')
          create_db_and_tables()
          print('‚úÖ Database connection successful')
          "
          
          # Cleanup
          docker stop postgres-test || true
          docker network rm pluginmind-test || true

      - name: üê≥ Build Production Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./pluginmind_backend
          target: production
          load: true
          tags: pluginmind-backend:prod-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üß™ Test Production Container
        run: |
          # Create test network
          docker network create pluginmind-prod-test || true
          
          # Start PostgreSQL for testing
          docker run -d \
            --name postgres-prod-test \
            --network pluginmind-prod-test \
            -e POSTGRES_PASSWORD=test \
            -e POSTGRES_USER=test \
            -e POSTGRES_DB=test \
            postgres:15-alpine
          
          # Start backend
          docker run -d \
            --name backend-prod-test \
            --network pluginmind-prod-test \
            -p 8000:8000 \
            -e TESTING=1 \
            -e DATABASE_URL="postgresql://test:test@postgres-prod-test:5432/test" \
            -e OPENAI_API_KEY="test-key" \
            -e GROK_API_KEY="test-key" \
            -e GOOGLE_CLIENT_ID="test-client-id.apps.googleusercontent.com" \
            -e JWT_SECRET="dGVzdC1zZWNyZXQtZm9yLWNpLWNkLXRlc3Rpbmc=" \
            pluginmind-backend:prod-test
          
          # Wait for startup with retry logic
          echo "Waiting for backend to start..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health 2>/dev/null | grep -q "200"; then
              echo "‚úÖ Backend is ready after $RETRY_COUNT seconds"
              break
            fi
            
            echo "Waiting... ($RETRY_COUNT/$MAX_RETRIES)"
            sleep 1
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Backend failed to start after $MAX_RETRIES seconds"
              echo "Container logs:"
              docker logs backend-prod-test
              exit 1
            fi
          done
          
          # Test health endpoints
          echo "Testing health endpoints..."
          curl -f http://localhost:8000/health || (echo "Health check failed"; docker logs backend-prod-test; exit 1)
          curl -f http://localhost:8000/ready || (echo "Ready check failed"; docker logs backend-prod-test; exit 1)
          curl -f http://localhost:8000/live || (echo "Live check failed"; docker logs backend-prod-test; exit 1)
          
          echo "‚úÖ Production container health checks passed"
          
          # Cleanup
          docker stop backend-prod-test postgres-prod-test || true
          docker network rm pluginmind-prod-test || true

      # Docker Scout requires paid subscription - commented out
      # Users can enable their own security scanning solution
      # - name: üîç Security Scan
      #   uses: docker/scout-action@v1
      #   with:
      #     command: cves
      #     image: pluginmind-backend:prod-test
      #     only-severities: critical,high
      #     exit-code: true

  # =============================================================================
  # Push to Registry (DISABLED for template - users can enable if needed)
  # =============================================================================
  # Uncomment this entire job if you want to push images to a registry
  # Note: Multi-platform builds (arm64) can take 15+ minutes
  # push:
  #   name: üì§ Push to Registry
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: |
  #     github.event_name != 'pull_request' && 
  #     (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
  #   
  #   steps:
  #     - name: üì• Checkout Code
  #       uses: actions/checkout@v4
  #
  #     - name: üîß Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: üîë Login to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: üè∑Ô∏è Extract Metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=raw,value=latest,enable={{is_default_branch}}
  #
  #     - name: üê≥ Build & Push Multi-Platform Images
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./pluginmind_backend
  #         target: production
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # =============================================================================
  # Results Summary
  # =============================================================================
  results:
    name: üìã Docker Build Results
    runs-on: ubuntu-latest
    needs: [build]  # Removed push dependency since it's disabled
    if: always()
    
    steps:
      - name: üìä Summary Report
        run: |
          echo "## üê≥ Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Push to Registry | ‚è≠Ô∏è Disabled (enable in workflow) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Docker build failed - blocking deployment"
            exit 1
          else
            echo "‚úÖ Docker build successful"
          fi