# PluginMind Backend - Comprehensive Test Suite
# 100% Pass Gate Required for All Feature Development

name: üß™ Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
    outputs:
      test-results:
        description: "Test results summary"
        value: ${{ jobs.test.outputs.results }}

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # =============================================================================
  # Code Quality & Linting
  # =============================================================================
  lint:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        working-directory: ./pluginmind_backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: üñ§ Format Check (Black)
        working-directory: ./pluginmind_backend
        run: black --check --diff .

      - name: üìã Import Sort Check (isort)
        working-directory: ./pluginmind_backend
        run: isort --check-only --diff .

      - name: ‚ö° Linting (flake8)
        working-directory: ./pluginmind_backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: üè∑Ô∏è Type Check (mypy)
        working-directory: ./pluginmind_backend
        run: mypy app/ --ignore-missing-imports
        continue-on-error: true  # Non-blocking initially

  # =============================================================================
  # Unit & Integration Tests
  # =============================================================================
  test:
    name: üß™ Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.test-summary.outputs.results }}
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: üíæ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: üì¶ Install Dependencies
        working-directory: ./pluginmind_backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov httpx coverage
          pip install -r requirements.txt

      - name: üóÑÔ∏è Database Setup
        working-directory: ./pluginmind_backend
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          OPENAI_API_KEY: "test-key"
          GROK_API_KEY: "test-key"
          GOOGLE_CLIENT_ID: "test-client-id"
          JWT_SECRET: "dGVzdC1zZWNyZXQtZm9yLWNpLWNkLXRlc3Rpbmc="
        run: |
          python -c "
          import asyncio
          from app.database import create_db_and_tables
          asyncio.run(create_db_and_tables())
          "

      - name: üß™ Run Tests with Coverage
        working-directory: ./pluginmind_backend
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          OPENAI_API_KEY: "test-key"
          GROK_API_KEY: "test-key" 
          GOOGLE_CLIENT_ID: "test-client-id"
          JWT_SECRET: "dGVzdC1zZWNyZXQtZm9yLWNpLWNkLXRlc3Rpbmc="
          CORS_ORIGINS: "http://localhost:3000"
          ENVIRONMENT: "testing"
        run: |
          python -m pytest -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --tb=short \
            --strict-markers \
            --disable-warnings

      - name: üìä Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./pluginmind_backend/coverage.xml
          flags: backend
          name: pluginmind-backend

      - name: üéØ Test Summary
        id: test-summary
        working-directory: ./pluginmind_backend
        run: |
          echo "results=Tests completed for Python ${{ matrix.python-version }}" >> $GITHUB_OUTPUT

  # =============================================================================
  # Error Handling & Smoke Tests
  # =============================================================================
  error-tests:
    name: üö® Error Handling Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install Dependencies
        working-directory: ./pluginmind_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üö® Run Error Tests
        working-directory: ./pluginmind_backend
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          OPENAI_API_KEY: "test-key"
          GROK_API_KEY: "test-key"
          GOOGLE_CLIENT_ID: "test-client-id" 
          JWT_SECRET: "dGVzdC1zZWNyZXQtZm9yLWNpLWNkLXRlc3Rpbmc="
        run: |
          python run_error_tests.py
          echo "‚úÖ Error handling tests passed"

      - name: üî• Smoke Tests
        working-directory: ./pluginmind_backend
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          OPENAI_API_KEY: "test-key"
          GROK_API_KEY: "test-key"
          GOOGLE_CLIENT_ID: "test-client-id"
          JWT_SECRET: "dGVzdC1zZWNyZXQtZm9yLWNpLWNkLXRlc3Rpbmc="
        run: |
          # Start server in background
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
          # Run smoke tests
          chmod +x scripts/smoke_backend.sh
          BASE=http://localhost:8000 ./scripts/smoke_backend.sh
          
          echo "‚úÖ Smoke tests passed"

  # =============================================================================
  # Security & Performance Tests
  # =============================================================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üîí Security Check (bandit)
        working-directory: ./pluginmind_backend
        run: |
          pip install bandit[toml]
          bandit -r app/ -f json -o security-report.json || true
          bandit -r app/ --severity-level medium

      - name: üìã Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: pluginmind_backend/security-report.json

  # =============================================================================
  # Results Summary
  # =============================================================================
  results:
    name: üìã Test Results Summary
    runs-on: ubuntu-latest
    needs: [lint, test, error-tests, security]
    if: always()
    
    steps:
      - name: üìä Summary Report
        run: |
          echo "## üß™ Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.lint.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Error Handling | ${{ needs.error-tests.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Fail the workflow if any tests failed
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.error-tests.result }}" != "success" ]]; then
            echo "‚ùå Some tests failed - blocking deployment"
            exit 1
          else
            echo "‚úÖ All tests passed - ready for deployment"
          fi