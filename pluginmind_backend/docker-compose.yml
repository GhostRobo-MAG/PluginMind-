# PluginMind Backend - Docker Compose Configuration
# Multi-environment support: development, production, testing

version: '3.8'

# =============================================================================
# Services Configuration
# =============================================================================
services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET:-development}
    container_name: pluginmind-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://pluginmind:pluginmind@postgres:5432/pluginmind_db}
      
      # AI Service API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROK_API_KEY=${GROK_API_KEY}
      
      # Authentication
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - JWT_SECRET=${JWT_SECRET}
      
      # Security & CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      
      # Optional: Supabase Integration
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      
      # Production Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-4}
      - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-300}
      - GUNICORN_KEEPALIVE=${GUNICORN_KEEPALIVE:-5}
      - GUNICORN_GRACEFUL_TIMEOUT=${GUNICORN_GRACEFUL_TIMEOUT:-60}
      
      # Development Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
    volumes:
      # Development: Mount source code for hot reload
      - ${SOURCE_MOUNT:-./:/app:${MOUNT_OPTIONS:-delegated}}
      # Production: Mount only logs and temp directories
      - backend_logs:/app/logs
      - backend_tmp:/app/tmp
    depends_on:
      - postgres
      - redis
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - pluginmind-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/${HEALTH_ENDPOINT:-health}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pluginmind-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pluginmind_db}
      - POSTGRES_USER=${POSTGRES_USER:-pluginmind}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pluginmind}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - pluginmind-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pluginmind} -d ${POSTGRES_DB:-pluginmind_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching & Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: pluginmind-redis
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAXMEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    networks:
      - pluginmind-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: pluginmind-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ${SSL_CERT_PATH:-./nginx/ssl}:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - pluginmind-network
    profiles:
      - production
      - full

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  pluginmind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_tmp:
    driver: local
  nginx_logs:
    driver: local